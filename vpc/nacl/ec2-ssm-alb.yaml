AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 with Apache via apt, ALB for external access, and SSM automation.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the resources

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet ID for EC2 instance

  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet ID for the ALB

Resources:

  MyInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all traffic (lab/demo only)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  MyInstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyInstanceIAMRole
      Path: /

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c55b159cbfafe1f0  # Ubuntu 22.04 LTS in us-east-2 (change as needed)
      KeyName: testkey
      IamInstanceProfile: !Ref MyInstanceProfile
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref MyInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: MySSMApacheInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y apache2
          systemctl enable apache2
          systemctl start apache2
          echo "<h1>Hello from EC2 with Apache via CloudFormation</h1>" > /var/www/html/index.html

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: apache-targets
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: apache-alb
      Subnets:
        - !Ref PublicSubnetId
      SecurityGroups:
        - !Ref MyALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroupAttachment:
    Type: AWS::ElasticLoadBalancingV2::TargetGroupAttachment
    Properties:
      TargetGroupArn: !Ref MyTargetGroup
      TargetId: !Ref MyEC2Instance
      Port: 80

  MySSMAutomationDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: Restart Apache on the instance
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          InstanceId:
            type: String
        mainSteps:
          - name: restartApache
            action: aws:runCommand
            inputs:
              DocumentName: AWS-RunShellScript
              Parameters:
                commands:
                  - sudo systemctl restart apache2
              InstanceIds:
                - "{{ InstanceId }}"
